# SPDX-License-Identifier: MIT

name: CI default branch

on:
  push:
    branches: [packages]
  pull_request:
    branches: [packages]

jobs:
  linting-building:
    name: Run linters
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox tox-gh-actions
      - name: Run black
        run: make util/black
      # - name: Run mypy
      #   run: make util/mypy
      - name: Run flake8
        run: make util/flake8
      - name: Run bandit
        run: make util/bandit
      - name: Build the Python Package
        run: make util/flit/build
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: temporary_package
          path: dist/*.whl
          if-no-files-found: error
          retention-days: 1

  testing:
    name: Run tests on ${{ matrix.os }} for ${{ matrix.python-version }}
    needs: linting-building
    strategy:
      matrix:
        # "macos-latest" not included, because hosting on macos is not that common
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        exclude:
          # See tox's envlist in pyproject.toml:
          # Python 3.7 and 3.8 are excluded for Windows hosts, as the required
          # JSON1 extension is not available (by default).
          # Without these exclusions, runners would be requested which would
          # actually do nothing.
          - os: windows-latest
            python-version: "3.7"
          - os: windows-latest
            python-version: "3.8"
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup OS ${{ matrix.os }} - Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox tox-gh-actions coveralls coverage[toml]
      - name: Run tests with tox
        run: tox
        env:
          PLATFORM: ${{ matrix.os }}
      - name: Prepare coverage result
        run: |
          coverage combine --append
          coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_FLAG_NAME: OS_${{ matrix.os }}-Python_${{ matrix.python-version }}
          COVERALLS_PARALLEL: true

  layout-compilation:
    name: Verify that TexLayouts are compilable
    needs: linting-building
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox coveralls coverage[toml]
      # This runs the complete test suite again, so linux/python 3.9 is included
      # two times. Deal with it!
      - name: Create TeX Files
        run: make ci/test/texlayoutcompilation
      - name: Compile TeX Files
        uses: xu-cheng/latex-action@v2
        with:
          working_directory: tmp_compilation
          root_file: "*.tex"
          glob_root_file: true
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: compiled_layouts
          path: tmp_compilation/
          if-no-files-found: error
          retention-days: 1
      - name: Prepare coverage result
        run: |
          coverage combine --append
          coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_FLAG_NAME: layout-compilation
          COVERALLS_PARALLEL: true

  finish:
    name: Indicate completion to Coveralls.io
    needs: [testing, layout-compilation]
    runs-on: ubuntu-latest
    steps:
      - name: Finished coverage collection
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade coveralls
          coveralls --service=github --finish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
